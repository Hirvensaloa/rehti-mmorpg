digraph "Entity"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{Entity\n||+ Entity()\l+ ~Entity()\l+ getId()\l+ getInstanceId()\l+ getName()\l+ getLocation()\l+ setLocation()\l+ getRespawnLocation()\l+ getCurrentAction()\l+ getHp()\l+ getMaxHp()\l+ getInventory()\l+ getEquipment()\l+ getRange()\l+ getAttackSpeed()\l+ getMoveSpeed()\l+ getGameWorld()\l+ changeHp()\l+ setAction()\l+ move()\l+ attack()\l+ pickUpItem()\l+ dropItem()\l+ getSkillSet()\l+ update()\l+ respawn()\l+ isDisconnected()\l+ setDisconnected()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Base pure virtual Entity class. Different types of enities inherit this."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{std::enable_shared\l_from_this\< Entity \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node3 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #moveSpeedM\n#respawnTimeM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{milliseconds\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node4 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #pGameWorldM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{GameWorld\n||+ GameWorld()\l+ ~GameWorld()\l+ getPlayers()\l+ getPlayer()\l+ getMap()\l+ addPlayer()\l+ removePlayer()\l+ addNpc()\l+ getNpcs()\l+ getNpc()\l+ getEntity()\l+ getObjects()\l+ getItems()\l+ addItem()\l+ removeItem()\l+ updateGameWorld()\l+ initWorld()\l+ getPlayersMutex()\l+ getItemsMutex()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classGameWorld.html",tooltip="GameWorld class. It contains all the player, npc, object and item instances."];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -itemsM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{map\< Coordinates, std\l::vector\< std::shared\l_ptr\< Item \> \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -mapM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{Map\n||+ loadMap()\l+ findPath()\l+ findPathToRange()\l+ getHeight()\l+ getAccessMap()\l+ getRandomCoordinates()\l+ getRandomNeighbour()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classMap.html",tooltip="Static class representing the map of the game world. Map contains information about which tiles are a..."];
  Node7 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -accessMapM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{vector\< std::vector\l\< uint8_t \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node6 [color="grey25",fontsize="10",style="solid",label=" -heightMapM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{vector\< std::vector\l\< int \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node9 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -itemsMutexM\n-playersMutexM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{mutex\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -npcsM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{vector\< std::shared\l_ptr\< Npc \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node11 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -playersM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{vector\< std::shared\l_ptr\< PlayerCharacter \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node12 -> Node4 [color="grey25",fontsize="10",style="solid",label=" -objectsM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{map\< std::string, std\l::shared_ptr\< Object \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node13 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #inventoryM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{Inventory\n||+ Inventory()\l+ getItems()\l+ addItem()\l+ removeItem()\l+ removeAllItems()\l+ useItem()\l+ isFull()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classInventory.html",tooltip="Represents the items that an entity can carry."];
  Node1 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -ownerM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -inventorySizeM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 [label="{int\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node15 -> Node13 [color="grey25",fontsize="10",style="solid",label=" -itemsM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{vector\< std::shared\l_ptr\< Item \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node16 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #locationM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{Coordinates\n||+ Coordinates()\l+ operator==()\l+ distance()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structCoordinates.html",tooltip="Struct for coordinates."];
  Node14 -> Node16 [color="grey25",fontsize="10",style="solid",label=" +x\n+y\n+z" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #baseAccuracyM\n#baseDamageM\n#hpM\n#idM\n#instanceIdM\n#maxHpM\n#nextInstanceIdM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #isDisconnectedM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{bool\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node18 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #nameM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node18 [label="{string\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node19 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #equipmentM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node19 [label="{Equipment\n||+ Equipment()\l+ equip()\l+ unequip()\l+ getEquipmentStats()\l+ getAllEquipment()\l+ getSlotMap()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEquipment.html",tooltip="Class for representing the items an entity has equipped."];
  Node1 -> Node19 [color="grey25",fontsize="10",style="solid",label=" -ownerM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 -> Node19 [color="grey25",fontsize="10",style="solid",label=" -slotMapM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node20 [label="{map\< Slot, std::shared\l_ptr\< EquippableItem \> \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node21 -> Node19 [color="grey25",fontsize="10",style="solid",label=" -bootsSlotM\n-bottomSlotM\n-glovesSlotM\n-headSlotM\n-mainHandSlotM\n-neckSlotM\n-offHandSlotM\n-ringSlotM\n-topSlotM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node21 [label="{shared_ptr\< EquippableItem \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node22 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #currentActionM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node22 [label="{shared_ptr\< Action \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node23 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #skillSetM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node23 [label="{SkillSet\n||+ SkillSet()\l+ getSkills()\l+ getSkillXp()\l+ getSkillLevel()\l+ addSkillXp()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classSkillSet.html",tooltip="Contains all the skills that a character has."];
  Node24 -> Node23 [color="grey25",fontsize="10",style="solid",label=" -skillsM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node24 [label="{map\< int, SkillInfo \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node25 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #spawnCoordinateBoundsM" ,arrowhead="odiamond",fontname="Helvetica"];
  Node25 [label="{SpawnCoordinateBounds\n||}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$structSpawnCoordinateBounds.html",tooltip="Contains the spawn coordinate bounds for a character."];
  Node14 -> Node25 [color="grey25",fontsize="10",style="solid",label=" +xMax\n+xMin\n+yMax\n+yMin" ,arrowhead="odiamond",fontname="Helvetica"];
}
